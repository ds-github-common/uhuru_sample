{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction enebular（エネブラー）は、IoT製品・サービスづくりを包括的に支援する、開発・運用サービスです。 enebular で扱うものには大まかに以下の3つがあります。 アセット: プロジェクトが持つ資産のことです。ロジック／データフローやデータの可視化やコントロールを行うダッシュボードのほかに機械学習モデルなどが含まれます。 デバイス: アセットをデプロイするデバイスのことです。デバイスにはエッジ（マイコンなど）とクラウド（サーバレス環境やVMなど）の両方が含まれます。 その他設定:運用や開発に必要な設定（可視化を行うデータのデータソースやアクセス権限）などを指します。 enebular の主な利用方法は、enebular.com でアセットを開発して、開発が終わったものをそれぞれデバイスへデプロイして運用する、というふうになるかと思います。 アセット 現在利用できるアセットは以下になります（その他にも、機械学習モデルなど対応予定のアセットがあります）。 Flow:Node-RED で作成するデータフローのことです InfoMotion: グラフの可視化やデバイスへのコントロールを行うダッシュボードのことです InfoType: InfoMotion で利用するグラフやコントローラーの型です。 それぞれの詳細な情報は以下になります。 概要 実体 デプロイ場所（運用する場所） Flow Node-RED のフロー JSONとクレデンシャル情報 Node-RED が動作する実行環境 InfoMotion ダッシュボード 利用するデータソース情報・利用するInfoTyp情報・パネルの配置情報 Web サイト（iframe貼り付け） InfoType プラグインファイル JavaScript, CSS InfoMotion で利用（InfoType単体では利用しない） デバイス 外部のサービスと連携することで、開発したアセットをデバイスにデプロイできます。現在以下のようなサービスが利用可能です。 Pelion Device Management AWS IoT AWS Lambda Heroku これらのサービスを利用してデバイスにアセットをデプロイすることになりますが、デプロイをする際に知っておくべき概念が2つあります。 デバイス：アセットの実行環境となるデバイス本体 デバイスマスター：enebularからのデプロイのリクエストを受けてデバイスにデプロイを行ったり、デバイスの監視やenebular へのログ送信を行うデバイスのマスター 具体的なサービスを例に挙げてみましょう。 AWS IoTやPelion Device Managementなどエッジデバイスにデプロイをするクラウドサービスの場合、エッジデバイスがデバイスとなり、クラウドサービス自体はデバイスマスターとなります。 HerokuやAWS Lambdaなどクラウド上に実行環境が存在する場合は、クラウドサービスがデバイスとデバイスマスターの両方の役割を担います。 センサーなど物理的な情報を必要とするアセットのデプロイはAWS IoTやPelion Device Managementを、その他の管理などが目的のアセットのデプロイはHerokuやAWS Lambdaといったふうに使い分けることができます。 お問い合わせは(support@enebular.com)[support@enebular.com]からお願いします。 "},"GetStarted/":{"url":"GetStarted/","title":"Get Started","keywords":"","body":"Getting Started enebularの主要な機能に触れることができるチュートリアルです。 enebularを初めて利用する場合、下記のチュートリアルを通してenebularについて理解をすすめることをおすすめします。 Introduction: enebularへのサインアップ、Projectの作成、Asset(フロー)の作成についてのチュートリアルです Flow Deployment: アセットの1つであるフローを他の環境にデプロイする方法のチュートリアルです Data Visualization: アセットの1つであるInfoMotionを使用したデータの可視化についてのチュートリアルです。アセットのインポートについても触れます "},"GetStarted/Introduction.html":{"url":"GetStarted/Introduction.html","title":"Introduction","keywords":"","body":"Introduction このチュートリアルでは「enebularにサインアップし、フローを編集する」ということを実施します。（所要時間20分） Table of Contents enebularへのサインアップ Projectの作成 Asset(フロー)の作成の作成) フローの編集 enebularへのサインアップ enebular v1 のアカウントでは enebular v2にはサインインできません。enebular v1 ユーザーの方で enebular v2を使用したい場合、新しくアカウントを作成してください。 https://www.enebular.com にアクセスし、新規登録ボタンを押下します。 入力フォームに必要な情報を入力してください。privacy policy と terms of service を確認したのち、sign upボタンを押下してください。 下記の画面が表示され、登録したメールアドレスに登録確認用のメールが送信されます。メールが送信されるまで数分かかる場合があります。 登録確認用のメールにて、確認が完了すると enebular.com にサインイン可能になります。 Go To Dashboard をクリックしてください。 確認用メールが届かない場合 下記の手順で確認をお願いいたします。 正しいメールアカウントをチェックしていることを確認してください enebular.comからのメールがフィルタリングされていないことを確認してください email protected まで連絡をお願いします Projectの作成 enebular を始めるには、まず Projectを作成します。サインイン後の画面にある Create Projectからプロジェクトを作成します。 適当な title を入力して、Submit を押下します。 入力した名称で Project が作成されたことが一覧で確認できます。 Assetの作成 Project を作成したら、enebular の Asset の 1 つである Flowを作成しましょう。作成した Project を選択して Projectの管理画面に移動します。右下の + を押すと Asset を作成するモーダルが開きます。 Asset Type は flow を選択して、Flow のタイトルをつけます。Flowへのデフォルトのアクセス権（default role to asset）は今回はedit, deploy, publish に設定してください。一番下の categoryは任意のものを選択してください。Continue を押すと作成が完了し、Flow の詳細ページに移動します。 Edit Flow を押します。 フローを編集する画面が立ち上がります。 フローの編集 Asset の作成が完了したので、フローを編集してみましょう。 ここではコンソールに Hello World !と出力するシンプルなフローを作成します。 フローエディタでは、左側のパレットに並んでいるノードをワークスペースにドラッグアンドドロップして、ノード同士を繋いでフローを作成していきます。 下図の要領でinjectノードをワークスペースの中にドラッグアンドドロップで配置してください。injectノードはパレットの中でinput に分類されています。 injectノードは、フローを開始するトリガーとなるノードです。 同様の手順でdebugノードを配置します。debugノードはパレットの中でoutput に分類されています。 debugノードは 右メニューの debug タブにメッセージを出力するノードです。 下図のようにinjectノードとdebugノードをつなぎます。 Deploy ボタンを押下しフローを保存した後、画面右上の debugタブを選択します。最後にinjectノードのボタンをクリックすることでフローが起動しdebug タブにタイムスタンプが表示されます。 これでノードの配置、ノードのつなぎ方、そしてフローの起動方法が分かりました。 しかし今回はタイムスタンプではなく Hello World ! と出力するフローを作成したいので、今作ったフローをさらに編集します。 debugノードはデフォルトの設定では、msg.payloadに設定された値を debugタブに出力します。 したがってmsg.payloadオブジェクトの値を Hello World !という文字列で置き換えることによって、目的を達成することができます。 msg.payloadの値を文字列に置き換えるには changeノードを使用します。 injectノードとdebugノードの間に新しくchangeノードを配置します。changeノードはパレットの中でfunction に分類されています。 配置したchangeノードをダブルクリックしノードの設定を行います。赤線で囲んだ部分にHello World !と入力しDone ボタンを押下します。 Deploy ボタンを押下しフローを保存した後、injectノードのボタンを押下します。debug タブにHello World !と出力されます。 Well Done! enebular の Projectの作成方法、Asset(フロー)の作成方法、そしてシンプルなフローの編集が出来るようになりました。 "},"GetStarted/FlowDeployment.html":{"url":"GetStarted/FlowDeployment.html","title":"Flow Deployment","keywords":"","body":"Flow Deployment enebularの特徴として、作成したフローを様々な環境にデプロイし動作させるというものがあります。 このチュートリアルでは、「フローを別のサービス（Heroku）にデプロイし動作する」ということをします。（所要時間40分） このチュートリアルでは以下のことを行います。 なお、本ページはIntroductionのチュートリアルで Asset(フロー)の作成方法については理解していることを前提としています。 Herokuアカウントの取得については、Herokuから進めてください。 Table of Contents Herokuに送るフローを作成 デプロイの設定 Herokuボタンでアプリを作成 フローのデプロイ Heroku に送るフローを作成 Assetsからフローを作成します（既にフローを作成済みの場合、それを利用することも可能です）。 Heroku に送りたいフローを作成して、デプロイして保存します。 デプロイの設定 つづいて、デプロイの設定をします。 フローが作成できたら上部のメニューから Deploy ページに移動します。 表示された画面の Add Connection をクリックします。 Select Connection Type から Heroku を選択します。 Connection Nameはわかりやすい名前をつけます。Heroku API Token は Herokuの設定画面で確認します。 Herokuにログイン後ページ右上にある [Account Settings] を押します。 Manage Account ページで Account ページに移動します。 API Key 欄に移動し [Reveal] で API Key を表示します。 Heroku API Token に API Key をコピーして、[Save] を押します。 新しくconnectionが追加されたので、クリックしてください。 開いた画面の下部にある [Deploy to Heroku] からアプリを作成します。 Heroku ボタンでアプリを作成 Herokuボタンでアプリを作成します。すでに作成されている方は読み飛ばして下さい。 Heroku ボタンを押すとログインしていない場合、Herokuのログイン画面が出てくるのでログインします。 Heroku のアプリ設定が表示されます。 App name をわかりやすい名前で設定します。 作成後 の enebular Node-RED のログインするための USERNAME/PASSWORDを設定します。 入力が完了したら Deploy app ボタンを押下してデプロイを行ってください。 Herokuにクレジットカード情報を登録していない場合、以下のような入力画面が出ますが、本アプリは無料で利用できますので入力して継続ください。 情報を入力すると、アプリの作成が始まります。 下記のようにアプリが作成されていきます。 アプリの作成が完了すると Viewボタンが表示されるので押下します。 アプリが立ち上がり、enebular にログインするための USERNAME/PASSWORDの入力を求められます。 さきほど設定したものを入力してログインします。エディタが表示されることを確認します。 フローのデプロイ 保存されると Select Connection Type から Heroku を選択すると、Herokuアカウントが持つアプリ一覧が出てきます。 こちらから、さきほど作成した Heroku アプリをひとつチェックし [Deploy]を押します。 しばらく待っていると Deploy Added が表示されてデプロイが完了します。 Heroku アプリで確認すると無事フローがデプロイされています。 反映されたフローを確認します。 Well Done! enebular のデプロイ機能を使用して、作成したAsset(フロー)を別のサービスにデプロイすることが出来るようになりました。 "}}