'use strict'; // Import

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var querystring = require('querystring'); // ====================================
// Custom Badges

/**
 * Generate a HTML badge
 * @private
 * @method badge
 * @param {Object} opts
 * @param {string} opts.image The URL to the image
 * @param {string} [opts.alt] The alt attribute for the image
 * @param {string} [opts.url] The URL for the link
 * @param {string} [opts.title] The title attribute for the link
 * @return {string} the result badge
 */


function badge(_ref) {
  var image = _ref.image,
      alt = _ref.alt,
      url = _ref.url,
      title = _ref.title;
  // Check
  if (!image) throw new Error('image is missing'); // Create

  var result = alt ? "<img src=\"".concat(image, "\" alt=\"").concat(alt, "\" />") : "<img src=\"".concat(image, "\" />");

  if (url) {
    result = (title ? "<a href=\"".concat(url, "\" title=\"").concat(title, "\">") : "<a href=\"".concat(url, "\">")) + result + '</a>';
  }

  return result;
}

badge.badgeCategory = 'custom';
/**
 * Shields Custom Badge
 * @method shields
 * @param {Object} opts
 * @param {string} opts.left The text for the left side of the badge
 * @param {string} opts.right The text for the right side of the badge
 * @param {string} [opts.color='yellow'] The color for the badge
 * @param {string} [opts.alt] The alt attribute for the image
 * @param {string} [opts.url] The URL for the link
 * @param {string} [opts.title] The title attribute for the link
 * @return {string} the result badge
 */

function shields(_ref2) {
  var left = _ref2.left,
      right = _ref2.right,
      _ref2$color = _ref2.color,
      color = _ref2$color === void 0 ? 'yellow' : _ref2$color,
      alt = _ref2.alt,
      url = _ref2.url,
      title = _ref2.title;
  // Check
  if (!left) throw new Error('left is missing');
  if (!right) throw new Error('right is missing'); // Create

  var image = "https://img.shields.io/badge/".concat(left, "-").concat(right, "-").concat(color, ".svg");
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

shields.badgeCategory = 'custom'; // ====================================
// Development Badges

/**
 * NPM Version Badge
 * @method npmversion
 * @param {Object} opts
 * @param {string} opts.npmPackageName The repository slug (username/reponame)
 * @return {string} the result badge
 */

function npmversion(_ref3) {
  var npmPackageName = _ref3.npmPackageName;
  // Check
  if (!npmPackageName) throw new Error('npmPackageName is missing'); // Create

  var image = "https://img.shields.io/npm/v/".concat(npmPackageName, ".svg");
  var url = "https://npmjs.org/package/".concat(npmPackageName);
  var alt = 'NPM version';
  var title = 'View this project on NPM';
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

npmversion.badgeCategory = 'development';
/**
 * NPM Downloads Badge
 * @method npmdownloads
 * @param {Object} opts
 * @param {string} opts.npmPackageName The repository slug (username/reponame)
 * @return {string} the result badge
 */

function npmdownloads(_ref4) {
  var npmPackageName = _ref4.npmPackageName;
  // Check
  if (!npmPackageName) throw new Error('npmPackageName is missing');
  var image = "https://img.shields.io/npm/dm/".concat(npmPackageName, ".svg");
  var url = "https://npmjs.org/package/".concat(npmPackageName);
  var alt = 'NPM downloads';
  var title = 'View this project on NPM';
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

npmdownloads.badgeCategory = 'development';
/**
 * David DM Dependencies Badge
 * @method daviddm
 * @param {Object} opts
 * @param {string} opts.githubSlug The github slug that the project lives at (e.g. bevry/badges)
 * @return {string} the result badge
 */

function daviddm(_ref5) {
  var githubSlug = _ref5.githubSlug;
  // Check
  if (!githubSlug) throw new Error('githubSlug is missing'); // Create

  var image = "https://img.shields.io/david/".concat(githubSlug, ".svg");
  var url = "https://david-dm.org/".concat(githubSlug);
  var alt = 'Dependency Status';
  var title = "View the status of this project's dependencies on DavidDM";
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

daviddm.badgeCategory = 'development';
/**
 * David DM Dev Dependencies Badge
 * @method daviddmdev
 * @param {Object} opts
 * @param {string} opts.githubSlug The github slug that the project lives at (e.g. bevry/badges)
 * @return {string} the result badge
 */

function daviddmdev(_ref6) {
  var githubSlug = _ref6.githubSlug;
  // Check
  if (!githubSlug) throw new Error('githubSlug is missing'); // Create

  var image = "https://img.shields.io/david/dev/".concat(githubSlug, ".svg");
  var url = "https://david-dm.org/".concat(githubSlug, "#info=devDependencies");
  var alt = 'Dev Dependency Status';
  var title = "View the status of this project's development dependencies on DavidDM";
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

daviddmdev.badgeCategory = 'development';
/**
 * Nodei.co Badge
 * @method nodeico
 * @param {Object} opts
 * @param {string} opts.npmPackageName
 * @param {String|Object} [opts.nodeicoQueryString] See https://nodei.co for options
	defined as either a string param1=&param2=
	or an object {param1: '', param2: ''} that will be serialized to param1=&param2= etc.
 * @return {string} the result badge
 */

function nodeico(_ref7) {
  var npmPackageName = _ref7.npmPackageName,
      nodeicoQueryString = _ref7.nodeicoQueryString;
  // Prepare
  if (!npmPackageName) throw new Error('npmPackageName is missing');

  if (nodeicoQueryString && typeof nodeicoQueryString !== 'string' && _typeof(nodeicoQueryString) !== 'object') {
    throw new Error('nodeicoQueryString must be a string or an object');
  } // Return


  var url = "https://www.npmjs.com/package/".concat(npmPackageName);
  var alt = 'Nodei.co badge';
  var title = 'Nodei.co badge';
  var image = "https://nodei.co/npm/".concat(npmPackageName, ".png");
  var query = _typeof(nodeicoQueryString) === 'object' ? querystring.stringify(nodeicoQueryString) : nodeicoQueryString;
  if (query) image += "?".concat(query);
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

nodeico.badgeCategory = 'development'; // ====================================
// Testing Badges

/**
 * Sauce Labs Browser Matrix Badge
 * @method saucelabsbm
 * @param {Object} opts
 * @param {string} opts.githubSlug The github slug that the project lives at (e.g. bevry/badges)
 * @return {string} the result badge
 */

function saucelabsbm(_ref8) {
  var saucelabsUsername = _ref8.saucelabsUsername,
      saucelabsAuthToken = _ref8.saucelabsAuthToken;
  // Check
  if (!saucelabsUsername) throw new Error('saucelabsUsername is missing');
  saucelabsAuthToken = saucelabsAuthToken || process.env.SAUCELABS_AUTH_TOKEN;
  if (!saucelabsAuthToken) throw new Error('saucelabsAuthToken is missing'); // Create

  var image = "https://saucelabs.com/browser-matrix/".concat(saucelabsUsername, ".svg?auth=").concat(escape(saucelabsAuthToken));
  var url = "https://saucelabs.com/u/".concat(saucelabsUsername);
  var alt = 'Sauce Labs Browser Matrix';
  var title = "Check this project's browser tests on Sauce Labs";
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

saucelabsbm.badgeCategory = 'testing';
saucelabsbm.badgeInline = false;
/**
 * Sauce Labs Badge
 * @method saucelabs
 * @param {Object} opts
 * @param {string} opts.saucelabsUsername The saucelabs username
 * @param {string} opts.saucelabsAuthToken The saucelabs authorisation token
 * @return {string} the result badge
 */

function saucelabs(_ref9) {
  var saucelabsUsername = _ref9.saucelabsUsername,
      saucelabsAuthToken = _ref9.saucelabsAuthToken;
  // Check
  if (!saucelabsUsername) throw new Error('saucelabsUsername is missing');
  saucelabsAuthToken = saucelabsAuthToken || process.env.SAUCELABS_AUTH_TOKEN;
  if (!saucelabsAuthToken) throw new Error('saucelabsAuthToken is missing'); // Create

  var image = "https://saucelabs.com/browser-matrix/".concat(saucelabsUsername, ".svg?auth=").concat(escape(saucelabsAuthToken));
  var url = "https://saucelabs.com/u/".concat(saucelabsUsername);
  var alt = 'Sauce Labs Browser Matrix';
  var title = "Check this project's browser tests on Sauce Labs";
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

saucelabs.badgeCategory = 'testing';
/**
 * Travis CI Badge
 * @method travisci
 * @param {Object} opts
 * @param {string} opts.githubSlug The github slug that the project lives at (e.g. bevry/badges)
 * @param {string} [opts.travisTLD=org] The TLD to use for travis, use "com" if you have moved to travis-ci.com instead of travis-ci.org
 * @return {string} the result badge
 */

function travisci(_ref10) {
  var githubSlug = _ref10.githubSlug,
      _ref10$travisTLD = _ref10.travisTLD,
      travisTLD = _ref10$travisTLD === void 0 ? 'org' : _ref10$travisTLD;
  // Check
  if (!githubSlug) throw new Error('githubSlug is missing'); // Create

  var image = ['https://img.shields.io/travis', travisTLD === 'com' ? 'com' : '', githubSlug, 'master.svg'].filter(function (i) {
    return Boolean(i);
  }).join('/');
  var url = "http://travis-ci.".concat(travisTLD, "/").concat(githubSlug);
  var alt = 'Travis CI Build Status';
  var title = "Check this project's build status on TravisCI";
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

travisci.badgeCategory = 'testing';
/**
 * Codeship Badge
 * @method codeship
 * @param {Object} opts
 * @param {string} opts.codeshipProjectUUID The UUID for a specific project, which is available on the General tab in your project settings
 * @param {string} opts.codeshipProjectID The ID for a specific project, which is available via the URL for the codeship project page
 * @return {string} the result badge
 */

function codeship(_ref11) {
  var codeshipProjectUUID = _ref11.codeshipProjectUUID,
      codeshipProjectID = _ref11.codeshipProjectID;
  // Check
  if (!codeshipProjectUUID) throw new Error('codeshipProjectUUID is missing');
  if (!codeshipProjectID) throw new Error('codeshipProjectID is missing'); // Create

  var image = "https://img.shields.io/codeship/".concat(codeshipProjectUUID, "/master.svg");
  var url = "https://www.codeship.io/projects/".concat(codeshipProjectID);
  var alt = 'Codeship Status';
  var title = "Check this project's status on Codeship";
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

codeship.badgeCategory = 'testing';
/**
 * Coveralls Badge
 * @method coveralls
 * @param {Object} opts
 * @param {string} opts.githubSlug The github slug that the project lives at (e.g. bevry/badges)
 * @return {string} the result badge
 */

function coveralls(_ref12) {
  var githubSlug = _ref12.githubSlug;
  // Check
  if (!githubSlug) throw new Error('githubSlug is missing'); // Create

  var image = "https://img.shields.io/coveralls/".concat(githubSlug, ".svg");
  var url = "https://coveralls.io/r/".concat(githubSlug);
  var alt = 'Coveralls Coverage Status';
  var title = "View this project's coverage on Coveralls";
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

coveralls.badgeCategory = 'testing';
/**
 * Code Climate Rating Badge
 * @method codeclimate
 * @param {Object} opts
 * @param {string} opts.githubSlug The github slug that the project lives at (e.g. bevry/badges)
 * @return {string} the result badge
 */

function codeclimate(_ref13) {
  var githubSlug = _ref13.githubSlug;
  // Check
  if (!githubSlug) throw new Error('githubSlug is missing'); // Create

  var image = "https://img.shields.io/codeclimate/github/".concat(githubSlug, ".svg");
  var url = "https://codeclimate.com/github/".concat(githubSlug);
  var alt = 'Code Climate Rating';
  var title = "View this project's rating on Code Climate";
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

codeclimate.badgeCategory = 'testing';
/**
 * BitHound Score Badge
 * @method bithound
 * @param {Object} opts
 * @param {string} opts.githubSlug The github slug that the project lives at (e.g. bevry/badges)
 * @return {string} the result badge
 */

function bithound(_ref14) {
  var githubSlug = _ref14.githubSlug;
  // Check
  if (!githubSlug) throw new Error('githubSlug is missing'); // Create

  var image = "https://bithound.io/github/".concat(githubSlug, "/badges/score.svg");
  var url = "https://bithound.io/github/".concat(githubSlug);
  var alt = 'BitHound Score';
  var title = "View this project's score on BitHound";
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

bithound.badgeCategory = 'testing';
/**
 * Waffle Badge
 * @method waffle
 * @param {Object} opts
 * @param {string} opts.githubSlug The github slug that the project lives at (e.g. bevry/badges)
 * @return {string} the result badge
 */

function waffle(_ref15) {
  var githubSlug = _ref15.githubSlug;
  // Check
  if (!githubSlug) throw new Error('githubSlug is missing'); // Create

  var label = 'ready';
  var image = "https://badge.waffle.io/".concat(githubSlug, ".png?label=").concat(escape(label));
  var url = "http://waffle.io/".concat(githubSlug);
  var alt = 'Stories in Ready';
  var title = "View this project's stories on Waffle.io";
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

waffle.badgeCategory = 'testing'; // ====================================
// Funding Badges

/**
 * 60devs Tips Badge
 * @method sixtydevstips
 * @param {Object} opts
 * @param {string} opts.sixtydevsUsername The 60devs username to donate to
 * @param {string} opts.sixtydevstipsURL The url to the 60devs donate page
 * @return {string} the result badge
 */

function sixtydevstips(_ref16) {
  var sixtydevstipsID = _ref16.sixtydevstipsID,
      sixtydevstipsURL = _ref16.sixtydevstipsURL;

  // Check
  if (!sixtydevstipsURL) {
    if (!sixtydevstipsID) throw new Error('sixtydevstipsID is missing');
    sixtydevstipsURL = "https://tips.60devs.com/tip/".concat(sixtydevstipsID);
  } // Create


  var image = 'https://img.shields.io/badge/60devs-donate-yellow.svg';
  var url = sixtydevstipsURL;
  var alt = '60devs tips donate button';
  var title = 'Donate to this project using 60devs tips';
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

sixtydevstips.badgeCategory = 'funding';
/**
 * Patreon Badge
 * @method patreon
 * @param {Object} opts
 * @param {string} opts.patreonUsername The Patreon username to donate to
 * @param {string} opts.patreonURL The url to the Patreon donate page
 * @return {string} the result badge
 */

function patreon(_ref17) {
  var patreonUsername = _ref17.patreonUsername,
      patreonURL = _ref17.patreonURL;

  // Check
  if (!patreonURL) {
    if (!patreonUsername) throw new Error('patreonUsername is missing');
    patreonURL = "https://patreon.com/".concat(patreonUsername);
  } // Create


  var image = 'https://img.shields.io/badge/patreon-donate-yellow.svg';
  var url = patreonURL;
  var alt = 'Patreon donate button';
  var title = 'Donate to this project using Patreon';
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

patreon.badgeCategory = 'funding';
/**
 * Open Collective Badge
 * @method opencollective
 * @param {Object} opts
 * @param {string} opts.opencollectiveUsername The Open Collective username to donate to
 * @param {string} opts.opencollectiveURL The url to the Open Collective donate page
 * @return {string} the result badge
 */

function opencollective(_ref18) {
  var opencollectiveUsername = _ref18.opencollectiveUsername,
      opencollectiveURL = _ref18.opencollectiveURL;

  // Check
  if (!opencollectiveURL) {
    if (!opencollectiveUsername) throw new Error('opencollectiveUsername is missing');
    opencollectiveURL = "https://opencollective.com/".concat(opencollectiveUsername);
  } // Create


  var image = 'https://img.shields.io/badge/open%20collective-donate-yellow.svg';
  var url = opencollectiveURL;
  var alt = 'Open Collective donate button';
  var title = 'Donate to this project using Open Collective';
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

opencollective.badgeCategory = 'funding';
/**
 * Gratipay Badge
 * @method gratipay
 * @param {Object} opts
 * @param {string} opts.gratipayUsername The Gratipay username to donate to
 * @param {string} opts.gratipayURL The url to the Gratipay donate page
 * @return {string} the result badge
 */

function gratipay(_ref19) {
  var gratipayUsername = _ref19.gratipayUsername,
      gratipayURL = _ref19.gratipayURL;

  // Check
  if (!gratipayURL) {
    if (!gratipayUsername) throw new Error('gratipayUsername is missing');
    gratipayURL = "https://gratipay.com/".concat(gratipayUsername);
  } // Create


  var image = 'https://img.shields.io/badge/gratipay-donate-yellow.svg';
  var url = gratipayURL;
  var alt = 'Gratipay donate button';
  var title = 'Donate weekly to this project using Gratipay';
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

gratipay.badgeCategory = 'funding';
/**
 * Flattr Badge
 * @method flattr
 * @param {Object} opts
 * @param {string} opts.flattrCode The Flattr code to donate to (e.g. 344188/balupton-on-Flattr)
 * @param {string} opts.flattrUsername The Flattr username to donate to (e.g. balupton)
 * @param {string} opts.flattrURL The url to the flattr donate page
 * @return {string} the result badge
 */

function flattr(_ref20) {
  var flattrCode = _ref20.flattrCode,
      flattrUsername = _ref20.flattrUsername,
      flattrURL = _ref20.flattrURL;

  // Check
  if (!flattrURL) {
    if (flattrUsername) {
      flattrURL = "https://flattr.com/profile/".concat(flattrUsername);
    } else if (flattrCode) {
      flattrURL = "https://flattr.com/thing/".concat(flattrCode);
    } else {
      throw new Error('flattrUsername/flattrCode is missing');
    }
  } // Create


  var image = 'https://img.shields.io/badge/flattr-donate-yellow.svg';
  var url = flattrURL;
  var alt = 'Flattr donate button';
  var title = 'Donate to this project using Flattr';
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

flattr.badgeCategory = 'funding';
/**
 * Paypal Badge
 * @method paypal
 * @param {Object} opts
 * @param {string} opts.paypalURL The url to the paypal donate page
 * @param {string} opts.paypalButtonID The Paypal button id
 * @param {string} opts.paypalUsername The Paypal.me username
 * @return {string} the result badge
 */

function paypal(_ref21) {
  var paypalURL = _ref21.paypalURL,
      paypalButtonID = _ref21.paypalButtonID,
      paypalUsername = _ref21.paypalUsername;

  // Check
  if (!paypalURL) {
    if (paypalButtonID) {
      paypalURL = "https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=".concat(escape(paypalButtonID));
    } else if (paypalUsername) {
      paypalURL = "https://paypal.me/".concat(paypalUsername);
    } else {
      throw new Error('paypalURL, paypalButtonID, or paypalUsername is missing, at least one must exist');
    }
  } // Create


  var image = 'https://img.shields.io/badge/paypal-donate-yellow.svg';
  var url = paypalURL;
  var alt = 'PayPal donate button';
  var title = 'Donate to this project using Paypal';
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

paypal.badgeCategory = 'funding';
/**
 * Crypto Badge
 * @method crypto
 * @param {Object} opts
 * @param {string} opts.cryptoURL The url to the crypto donation page
 * @return {string} the result badge
 */

function crypto(_ref22) {
  var cryptoURL = _ref22.cryptoURL,
      bitcoinURL = _ref22.bitcoinURL;
  // Check
  var url = cryptoURL || bitcoinURL;
  if (!url) throw new Error('cryptoURL is missing'); // Create

  var image = 'https://img.shields.io/badge/crypto-donate-yellow.svg';
  var alt = 'crypto donate button';
  var title = 'Donate to this project using Cryptocurrency';
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

crypto.badgeCategory = 'funding';
/**
 * Crypto Badge
 * @method bitcoin
 * @param {Object} opts - forwarded to {@link crypto}
 * @return {string} the result badge
 */

function bitcoin(opts) {
  return crypto(opts);
}

bitcoin.badgeCategory = 'funding';
/**
 * Wishlist Badge
 * @method wishlist
 * @param {Object} opts
 * @param {string} opts.wishlistURL The url to the wishlist page
 * @return {string} the result badge
 */

function wishlist(_ref23) {
  var wishlistURL = _ref23.wishlistURL;
  // Check
  if (!wishlistURL) throw new Error('wishlistURL is missing'); // Create

  var image = 'https://img.shields.io/badge/wishlist-donate-yellow.svg';
  var url = wishlistURL;
  var alt = 'Wishlist browse button';
  var title = 'Buy an item on our wishlist for us';
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

wishlist.badgeCategory = 'funding';
/**
 * Buy Me A Coffee Badge
 * @method buymeacoffee
 * @param {Object} opts
 * @param {string} opts.buymeacoffeeUsername The Buy Me A Coffee username to donate to
 * @param {string} opts.buymeacoffeeURL The url to the Buy Me A Coffee donate page
 * @return {string} the result badge
 */

function buymeacoffee(_ref24) {
  var buymeacoffeeUsername = _ref24.buymeacoffeeUsername,
      buymeacoffeeURL = _ref24.buymeacoffeeURL;

  // Check
  if (!buymeacoffeeURL) {
    if (!buymeacoffeeUsername) throw new Error('buymeacoffeeUsername is missing');
    buymeacoffeeURL = "https://buymeacoffee.com/".concat(buymeacoffeeUsername);
  } // Create


  var image = 'https://img.shields.io/badge/buy%20me%20a%20coffee-donate-yellow.svg';
  var url = buymeacoffeeURL;
  var alt = 'Buy Me A Coffee donate button';
  var title = 'Donate to this project using Buy Me A Coffee';
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

buymeacoffee.badgeCategory = 'funding';
/**
 * Liberapay Badge
 * @method liberapay
 * @param {Object} opts
 * @param {string} opts.liberapayUsername The Liberapay username to donate to
 * @param {string} opts.liberapayURL The url to the Liberapay donate page
 * @return {string} the result badge
 */

function liberapay(_ref25) {
  var liberapayUsername = _ref25.liberapayUsername,
      liberapayURL = _ref25.liberapayURL;

  // Check
  if (!liberapayURL) {
    if (!liberapayUsername) throw new Error('liberapayUsername is missing');
    liberapayURL = "https://liberapay.com/".concat(liberapayUsername);
  } // Create


  var image = 'https://img.shields.io/badge/liberapay-donate-yellow.svg';
  var url = liberapayURL;
  var alt = 'Liberapay donate button';
  var title = 'Donate to this project using Liberapay';
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

liberapay.badgeCategory = 'funding';
/**
 * Thanks App Badge
 * @method thanksapp
 * @param {Object} opts
 * @param {string} opts.npmPackageName The repository slug (username/reponame)
 * @param {string} opts.githubSlug The github slug that the project lives at (e.g. bevry/badges)
 * @param {string} opts.thanksappUsername The username for the Thanks App donate page
 * @param {string} opts.thanksappURL The url to the Thanks App donate page
 * @return {string} the result badge
 */

function thanksapp(_ref26) {
  var npmPackageName = _ref26.npmPackageName,
      githubSlug = _ref26.githubSlug,
      thanksappUsername = _ref26.thanksappUsername,
      thanksappURL = _ref26.thanksappURL;

  // Check
  if (!thanksappURL) {
    if (thanksappUsername) {
      thanksappURL = "https://givethanks.app/u/".concat(githubSlug);
    } else if (npmPackageName) {
      thanksappURL = "https://givethanks.app/donate/npm/".concat(npmPackageName);
    } else if (githubSlug) {
      thanksappURL = "https://givethanks.app/donate/github/".concat(githubSlug);
    } else {
      throw new Error('at least one of these is required: thanksappUsername, npmPackageName, githubSlug');
    }
  } // Create


  var image = 'https://img.shields.io/badge/thanksapp-donate-yellow.svg';
  var url = thanksappURL;
  var alt = 'Thanks App donate button';
  var title = 'Donate to this project using Thanks App';
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

thanksapp.badgeCategory = 'funding';
/**
 * Boost Lab Badge
 * @method boostlab
 * @param {Object} opts
 * @param {string} opts.githubSlug The github slug that the project lives at (e.g. bevry/badges)
 * @return {string} the result badge
 */

function boostlab(_ref27) {
  var githubSlug = _ref27.githubSlug;
  // Check
  if (!githubSlug) throw new Error('githubSlug is missing'); // Create

  var image = 'https://img.shields.io/badge/boostlab-donate-yellow.svg';
  var url = "https://boost-lab.app/".concat(githubSlug);
  var alt = 'Boost Lab donate button';
  var title = 'Donate to this project using Boost Lab';
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

boostlab.badgeCategory = 'funding'; // ====================================
// Social Badges

/**
 * Slackin Script Badge
 * @method slackinscript
 * @param {Object} opts
 * @param {string} opts.slackinURL The slackin url (e.g. https://slack.bevry.me)
 * @return {string} the result badge
 */

function slackinscript(_ref28) {
  var slackinURL = _ref28.slackinURL;
  // Check
  if (!slackinURL) throw new Error('slackinURL is missing'); // Create

  return "<script async defer src=\"".concat(slackinURL, "/slackin.js\"></script>");
}

slackinscript.badgeCategory = 'social';
slackinscript.badgeScript = true;
/**
 * Slackin Badge
 * @method slackin
 * @param {Object} opts
 * @param {string} opts.slackinURL The slackin url (e.g. https://slack.bevry.me)
 * @return {string} the result badge
 */

function slackin(_ref29) {
  var slackinURL = _ref29.slackinURL;
  // Check
  if (!slackinURL) throw new Error('slackinURL is missing'); // Create

  var image = "".concat(slackinURL, "/badge.svg");
  var url = slackinURL;
  var alt = 'Slack community badge';
  var title = "Join this project's slack community";
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

slackin.badgeCategory = 'social';
/**
 * Google Analytics Beacon Badge
https://github.com/igrigorik/ga-beacon
 * @method gabeacon
 @param {Object} opts
 * @param {string} opts.gaTrackingID The google analytics tracing id (e.g. UA-XXXXX-XX)
 * @param {string} opts.githubSlug The github slug that the project lives at (e.g. bevry/badges)
 * @return {string} the result badge
 */

function gabeacon(_ref30) {
  var gaTrackingID = _ref30.gaTrackingID,
      githubSlug = _ref30.githubSlug;
  // Check
  if (!gaTrackingID) throw new Error('gaTrackingID is missing');
  if (!githubSlug) throw new Error('githubSlug is missing'); // Create

  var image = "https://ga-beacon.appspot.com/".concat(gaTrackingID, "/").concat(githubSlug);
  var url = 'https://github.com/igrigorik/ga-beacon';
  var alt = 'Google Analytics beacon image';
  var title = 'Get Google Analytics for your project';
  return badge({
    image: image,
    alt: alt,
    url: url,
    title: title
  });
}

gabeacon.badgeCategory = 'social';
/**
 * Google Plus One Button
 * @method googleplusone
 * @param {Object} opts
 * @param {string} opts.homepage The page url that the badge will be for
 * @return {string} the result badge
 */

function googleplusone(_ref31) {
  var homepage = _ref31.homepage;
  // Check
  if (!homepage) throw new Error('homepage is missing'); // Create

  return "<span class=\"g-plusone\" data-size=\"medium\" data-href=\"".concat(homepage, "\"></span><script>(function() {var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true; po.src = '//apis.google.com/js/plusone.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);})();</script>");
}

googleplusone.badgeCategory = 'social';
googleplusone.badgeScript = true;
/**
 * Reddit Submit Button
 * @method redditsubmit
 * @param {Object} opts
 * @param {string} opts.homepage The page url that the badge will be for
 * @return {string} the result badge
 */

function redditsubmit(_ref32) {
  var homepage = _ref32.homepage;
  // Check
  if (!homepage) throw new Error('homepage is missing'); // Create

  return "<script>reddit_url=\"".concat(homepage, "\"</script><script src=\"https://en.reddit.com/static/button/button1.js\"></script>");
}

redditsubmit.badgeCategory = 'social';
redditsubmit.badgeScript = true;
/**
 * Hacker News Submit Button
 * @method hackernewssubmit
 * @param {Object} opts
 * @param {string} opts.homepage The page url that the badge will be for
 * @return {string} the result badge
 */

function hackernewssubmit(_ref33) {
  var homepage = _ref33.homepage;
  // Check
  if (!homepage) throw new Error('homepage is missing'); // Create

  return "<a href=\"https://news.ycombinator.com/submit\" class=\"hn-button\" data-url=\"".concat(homepage, "\" data-count=\"horizontal\">Vote on Hacker News</a><script>var HN=[];HN.factory=function(e){return function(){HN.push([e].concat(Array.prototype.slice.call(arguments,0)))};},HN.on=HN.factory(\"on\"),HN.once=HN.factory(\"once\"),HN.off=HN.factory(\"off\"),HN.emit=HN.factory(\"emit\"),HN.load=function(){var e=\"hn-button.js\";if(document.getElementById(e))return;var t=document.createElement(\"script\");t.id=e,t.src=\"https://hn-button.herokuapp.com/hn-button.js\";var n=document.getElementsByTagName(\"script\")[0];n.parentNode.insertBefore(t,n)},HN.load();</script>");
}

hackernewssubmit.badgeCategory = 'social';
hackernewssubmit.badgeScript = true;
/**
 * Facebook Like Button
 * @method facebooklike
 * @param {Object} opts
 * @param {string} opts.homepage The page url that the badge will be for
 * @param {string} opts.facebookApplicationID The facebook application id that the badge is for
 * @return {string} the result badge
 */

function facebooklike(_ref34) {
  var homepage = _ref34.homepage,
      facebookApplicationID = _ref34.facebookApplicationID;
  // Prepare
  if (!homepage) throw new Error('homepage is missing');
  facebookApplicationID = facebookApplicationID || process.env.FACEBOOK_APPLICATION_ID;
  if (!facebookApplicationID) throw new Error('facebookApplicationID is missing'); // Return

  return "<iframe src=\"https://www.facebook.com/plugins/like.php?href=".concat(escape(homepage), "&amp;send=false&amp;layout=button_count&amp;width=450&amp;show_faces=false&amp;font&amp;colorscheme=light&amp;action=like&amp;height=21&amp;appId=").concat(escape(facebookApplicationID), "\" scrolling=\"no\" frameborder=\"0\" style=\"border:none; overflow:hidden; width:450px; height:21px;\" allowTransparency=\"true\"></iframe>");
}

facebooklike.badgeCategory = 'social';
facebooklike.badgeScript = true;
/**
 * Facebook Follow Button
 * @method facebookfollow
 * @param {Object} opts
 * @param {string} opts.facebookUsername The facebook username to follow
 * @param {string} opts.facebookApplicationID The facebook application id that the badge is for
 * @return {string} the result badge
 */

function facebookfollow(_ref35) {
  var facebookUsername = _ref35.facebookUsername,
      facebookApplicationID = _ref35.facebookApplicationID;
  // Prepare
  if (!facebookUsername) throw new Error('facebookUsername is missing');
  facebookApplicationID = facebookApplicationID || process.env.FACEBOOK_APPLICATION_ID;
  if (!facebookApplicationID) throw new Error('facebookApplicationID is missing'); // Return

  return "<iframe src=\"https://www.facebook.com/plugins/follow.php?href=https%3A%2F%2Fwww.facebook.com%2F".concat(escape(facebookUsername), "&amp;layout=button_count&amp;show_faces=false&amp;colorscheme=light&amp;font&amp;width=450&amp;appId=").concat(escape(facebookApplicationID), "\" scrolling=\"no\" frameborder=\"0\" style=\"border:none; overflow:hidden; width:450px; height: 20px;\" allowTransparency=\"true\"></iframe>");
}

facebookfollow.badgeCategory = 'social';
facebookfollow.badgeScript = true;
/**
 * Twitter Tweet Button
 * @method twittertweet
 * @param {Object} opts
 * @param {string} opts.twitterUsername The twitter username to tweet at
 * @return {string} the result badge
 */

function twittertweet(_ref36) {
  var twitterUsername = _ref36.twitterUsername;
  // Prepare
  if (!twitterUsername) throw new Error('twitterUsername is missing'); // Return

  return "<a href=\"https://twitter.com/share\" class=\"twitter-share-button\" data-via=\"".concat(twitterUsername, "\" data-related=\"").concat(twitterUsername, "\">Tweet</a><script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=\"https://platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);}}(document,\"script\",\"twitter-wjs\");</script>");
}

twittertweet.badgeCategory = 'social';
twittertweet.badgeScript = true;
/**
 * Twitter Follow Button
 * @method twitterfollow
 * @param {Object} opts
 * @param {string} opts.twitterUsername The twitter username to follow
 * @return {string} the result badge
 */

function twitterfollow(_ref37) {
  var twitterUsername = _ref37.twitterUsername;
  // Prepare
  if (!twitterUsername) throw new Error('twitterUsername is missing'); // Return

  return "<a href=\"https://twitter.com/".concat(escape(twitterUsername), "\" class=\"twitter-follow-button\" data-show-count=\"false\">Follow @").concat(twitterUsername, "</a><script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=\"https://platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);}}(document,\"script\",\"twitter-wjs\");</script>");
}

twitterfollow.badgeCategory = 'social';
twitterfollow.badgeScript = true;
/**
 * Github Follow Button
 * @method githubfollow
 * @param {Object} opts
 * @param {string} opts.githubUsername The github user to follow
 * @return {string} the result badge
 */

function githubfollow(_ref38) {
  var githubUsername = _ref38.githubUsername;
  // Prepare
  if (!githubUsername) throw new Error('githubUsername is missing'); // Return

  return "<iframe src=\"https://ghbtns.com/github-btn.html?user=".concat(escape(githubUsername), "&amp;type=follow&amp;count=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"165\" height=\"20\"></iframe>");
}

githubfollow.badgeCategory = 'social';
githubfollow.badgeScript = true;
/**
 * GitHub Star Button
 * @method githubstar
 * @param {Object} opts
 * @param {string} opts.githubSlug The github slug that the project lives at (e.g. bevry/badges)
 * @return {string} the result badge
 */

function githubstar(_ref39) {
  var githubSlug = _ref39.githubSlug;
  // Prepare
  if (!githubSlug) throw new Error('githubSlug is missing');
  var split = githubSlug.split('/');
  var githubUsername = split[0];
  var githubRepository = split[1];
  if (!githubUsername || !githubRepository) throw new Error('githubSlug is invalid'); // Return

  return "<iframe src=\"https://ghbtns.com/github-btn.html?user=".concat(escape(githubUsername), "&amp;repo=").concat(escape(githubRepository), "&amp;type=watch&amp;count=true\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"0\" width=\"110\" height=\"20\"></iframe>");
}

githubstar.badgeCategory = 'social';
githubstar.badgeScript = true;
/**
 * Quora Follow Button
 * @method quorafollow
 * @param {Object} opts
 * @param {string} opts.quoraUsername The quora user to follow
 * @param {string} [opts.quoraRealname] The quora user's name
 * @param {string} [opts.quoraCode] Some code
 * @return {string} the result badge
 */

function quorafollow(_ref40) {
  var quoraUsername = _ref40.quoraUsername,
      quoraRealname = _ref40.quoraRealname,
      quoraCode = _ref40.quoraCode;
  // Prepare
  if (!quoraUsername) throw new Error('quoraUsername is missing');
  quoraRealname = quoraRealname || quoraUsername.replace(/-/g, ' ');
  quoraCode = quoraCode || '7N31XJs'; // Return

  return "\n\t\t<span data-name=\"".concat(quoraUsername, "\">\n\t\t\tFollow <a href=\"http://www.quora.com/").concat(quoraUsername, "\">").concat(quoraRealname, "</a> on <a href=\"http://www.quora.com\">Quora</a>\n\t\t\t<script src=\"https://www.quora.com/widgets/follow?embed_code=").concat(escape(quoraCode), "\"></script>\n\t\t</span>").replace(/\n\s*/g, '');
}

quorafollow.badgeCategory = 'social';
quorafollow.badgeScript = true; // Export

module.exports = {
  badge: badge,
  shields: shields,
  npmversion: npmversion,
  npmdownloads: npmdownloads,
  daviddm: daviddm,
  daviddmdev: daviddmdev,
  saucelabsbm: saucelabsbm,
  saucelabs: saucelabs,
  travisci: travisci,
  codeship: codeship,
  coveralls: coveralls,
  codeclimate: codeclimate,
  bithound: bithound,
  waffle: waffle,
  sixtydevstips: sixtydevstips,
  patreon: patreon,
  opencollective: opencollective,
  gratipay: gratipay,
  flattr: flattr,
  paypal: paypal,
  crypto: crypto,
  bitcoin: bitcoin,
  wishlist: wishlist,
  buymeacoffee: buymeacoffee,
  liberapay: liberapay,
  thanksapp: thanksapp,
  boostlab: boostlab,
  slackinscript: slackinscript,
  slackin: slackin,
  gabeacon: gabeacon,
  googleplusone: googleplusone,
  redditsubmit: redditsubmit,
  hackernewssubmit: hackernewssubmit,
  facebooklike: facebooklike,
  facebookfollow: facebookfollow,
  twittertweet: twittertweet,
  twitterfollow: twitterfollow,
  githubfollow: githubfollow,
  githubstar: githubstar,
  quorafollow: quorafollow,
  nodeico: nodeico
};